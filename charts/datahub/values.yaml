# Values to start up datahub after starting up the datahub-prerequisites chart with "prerequisites" release name
# Copy this chart and change configuration as needed.
datahub-gms:
  enabled: true
  image:
    repository: linkedin/datahub-gms
    tag: "v0.8.23"

datahub-frontend:
  enabled: true
  image:
    repository: linkedin/datahub-frontend-react
    tag: "v0.8.23"
  # Set up ingress to expose react front-end
  ingress:
    enabled: false

datahub-mae-consumer:
  enabled: true
  image:
    repository: linkedin/datahub-mae-consumer
    tag: "v0.8.23"

datahub-mce-consumer:
  enabled: true
  image:
    repository: linkedin/datahub-mce-consumer
    tag: "v0.8.23"

datahub-ingestion-cron:
  enabled: false
  image:
    repository: acryldata/datahub-ingestion
    tag: "v0.8.23.0"

elasticsearchSetupJob:
  enabled: true
  image:
    repository: linkedin/datahub-elasticsearch-setup
    tag: "v0.8.23"

kafkaSetupJob:
  enabled: false
  image:
    repository: linkedin/datahub-kafka-setup
    tag: "v0.8.23"

mysqlSetupJob:
  enabled: true
  image:
    repository: acryldata/datahub-mysql-setup
    tag: "v0.8.23.0"

datahubUpgrade:
  enabled: true
  image:
    repository: acryldata/datahub-upgrade
    tag: "v0.8.23.0"
  noCodeDataMigration:
    sqlDbType: "MYSQL"

global:
  graph_service_impl: neo4j
  datahub_analytics_enabled: true
  datahub_standalone_consumers_enabled: false

  elasticsearch:
    host: "elasticsearch-master"
    port: "9200"

  kafka:
    bootstrap:
      server: "dev-ultraio-kafka-dev.aivencloud.com:21811"
    # zookeeper:
    #   server: "prerequisites-zookeeper:2181"
    ## For AWS MSK set this to a number larger than 1
    # partitions: 3
    # replicationFactor: 3
    schemaregistry:
      url: "http://kafka-schema-registry-svc:8081"
      # type: AWS_GLUE
      # glue:
      #   region: us-east-1
      #   registry: datahub

  neo4j:
    host: "prerequisites-neo4j-community:7474"
    uri: "bolt://prerequisites-neo4j-community"
    username: "neo4j"
    password:
      secretRef: neo4j-secrets
      secretKey: neo4j-password

  sql:
    datasource:
      host: "prerequisites-mysql:3306"
      hostForMysqlClient: "prerequisites-mysql"
      port: "3306"
      url: "jdbc:mysql://prerequisites-mysql:3306/datahub?verifyServerCertificate=false&useSSL=true&useUnicode=yes&characterEncoding=UTF-8&enabledTLSProtocols=TLSv1.2"
      driver: "com.mysql.cj.jdbc.Driver"
      username: "root"
      password:
        secretRef: datahub-mysql-secrets
        secretKey: mysql-root-password

  datahub:
    gms:
      port: "8080"
      nodePort: "30001"
    mae_consumer:
      port: "9091"
      nodePort: "30002"
    appVersion: "1.0"

#  hostAliases:
#    - ip: "192.168.0.104"
#      hostnames:
#        - "broker"
#        - "mysql"
#        - "elasticsearch"
#        - "neo4j"

  credentialsAndCertsSecrets:
    name: convert-blockchain-notifications-kafka #secret name
    path: /mnt/datahub/certs/
    secureEnv:
      # ssl.key.password: KAFKA_SSL_KEYSTORE_PASSWORD
      ssl.keystore.password: KAFKA_SSL_KEYSTORE_PASSWORD
      ssl.truststore.password: KAFKA_SSL_TRUSTSTORE_PASSWORD
      kafkastore.ssl.truststore.password: KAFKA_SSL_TRUSTSTORE_PASSWORD

  springKafkaConfigurationOverrides:
    ssl.keystore.location: /mnt/datahub/certs/keystore.p12
    ssl.truststore.location: /mnt/datahub/certs/truststore.jks
    kafkastore.ssl.truststore.location: /mnt/datahub/certs/truststore.jks
    security.protocol: SSL
    kafkastore.security.protocol: SSL
    ssl.keystore.type: PKCS12
    ssl.truststore.type: JKS
    ssl.protocol: TLS
   #  ssl.endpoint.identification.algorithm:
